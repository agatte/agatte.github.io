{"ast":null,"code":"const node = {\n  row,\n  col,\n  isVisited,\n  distance\n};\n\nfunction dijkstra(grid, startNode, finishNode) {\n  //makes sure they don't overlap or there is no start/ end node\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n\n  nodes[startNode].distance = 0;\n  const unvisitedNodes = nodes.slice(); //visit node then update neighboring nodes to current distance + 1\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.unshift(); //walls\n\n    closestNode.isVisited = true;\n    if (closestNode === finishNode) return 'Success!';\n    updateNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbors(node, grid) {\n  const neighbors = getNeighbors(node, grid);\n\n  for (const neighbor of neighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n}","map":{"version":3,"sources":["/Users/anthonygatte/path-finding/src/algorithms/dijkstra.js"],"names":["node","row","col","isVisited","distance","dijkstra","grid","startNode","finishNode","nodes","unvisitedNodes","slice","length","sortNodesByDistance","closestNode","unshift","updateNeighbors","sort","nodeA","nodeB","neighbors","getNeighbors","neighbor","push"],"mappings":"AAAA,MAAMA,IAAI,GAAG;AACTC,EAAAA,GADS;AAETC,EAAAA,GAFS;AAGTC,EAAAA,SAHS;AAITC,EAAAA;AAJS,CAAb;;AAOA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AAC3C;AACA,MAAI,CAACD,SAAD,IAAc,CAACC,UAAf,IAA6BD,SAAS,KAAKC,UAA/C,EAA2D;AACvD,WAAO,KAAP;AACH;;AACDC,EAAAA,KAAK,CAACF,SAAD,CAAL,CAAiBH,QAAjB,GAA4B,CAA5B;AACA,QAAMM,cAAc,GAAGD,KAAK,CAACE,KAAN,EAAvB,CAN2C,CAO3C;;AACA,SAAO,CAAC,CAACD,cAAc,CAACE,MAAxB,EAAgC;AAC5BC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB;AACA,UAAMI,WAAW,GAAGJ,cAAc,CAACK,OAAf,EAApB,CAF4B,CAG5B;;AACAD,IAAAA,WAAW,CAACX,SAAZ,GAAwB,IAAxB;AACA,QAAIW,WAAW,KAAKN,UAApB,EAAgC,OAAO,UAAP;AAChCQ,IAAAA,eAAe,CAACF,WAAD,EAAcR,IAAd,CAAf;AACH;AACJ;;AAED,SAASO,mBAAT,CAA6BH,cAA7B,EAA6C;AACzCA,EAAAA,cAAc,CAACO,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACd,QAAN,GAAiBe,KAAK,CAACf,QAA7D;AACH;;AAED,SAASY,eAAT,CAAyBhB,IAAzB,EAA8BM,IAA9B,EAAoC;AAChC,QAAMc,SAAS,GAAGC,YAAY,CAACrB,IAAD,EAAOM,IAAP,CAA9B;;AACA,OAAK,MAAMgB,QAAX,IAAuBF,SAAvB,EAAkC;AAC9BE,IAAAA,QAAQ,CAAClB,QAAT,GAAoBJ,IAAI,CAACI,QAAL,GAAgB,CAApC;AACH;AACJ;;AAED,SAASiB,YAAT,CAAsBrB,IAAtB,EAA4BM,IAA5B,EAAkC;AAC9B,QAAMc,SAAS,GAAG,EAAlB;AACA,QAAM;AAAClB,IAAAA,GAAD;AAAMD,IAAAA;AAAN,MAAaD,IAAnB;AACA,MAAIC,GAAG,GAAG,CAAV,EAAamB,SAAS,CAACG,IAAV,CAAejB,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAf;AACb,MAAID,GAAG,GAAGK,IAAI,CAACM,MAAL,GAAc,CAAxB,EAA2BQ,SAAS,CAACG,IAAV,CAAejB,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJ,CAAcC,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAakB,SAAS,CAACG,IAAV,CAAejB,IAAI,CAACL,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGI,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,GAAiB,CAA3B,EAA8BQ,SAAS,CAACG,IAAV,CAAejB,IAAI,CAACL,GAAD,CAAJ,CAAUC,GAAG,GAAG,CAAhB,CAAf;AAEjC","sourcesContent":["const node = {\n    row,\n    col,\n    isVisited,\n    distance,\n};\n\nfunction dijkstra(grid, startNode, finishNode) {\n    //makes sure they don't overlap or there is no start/ end node\n    if (!startNode || !finishNode || startNode === finishNode) {\n        return false;\n    }\n    nodes[startNode].distance = 0;\n    const unvisitedNodes = nodes.slice();\n    //visit node then update neighboring nodes to current distance + 1\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.unshift();\n        //walls\n        closestNode.isVisited = true;\n        if (closestNode === finishNode) return 'Success!';\n        updateNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateNeighbors(node,grid) {\n    const neighbors = getNeighbors(node, grid);\n    for (const neighbor of neighbors) {\n        neighbor.distance = node.distance + 1;\n    }\n}\n\nfunction getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n\n}"]},"metadata":{},"sourceType":"module"}