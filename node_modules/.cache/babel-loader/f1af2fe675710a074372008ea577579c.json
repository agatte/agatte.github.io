{"ast":null,"code":"var _jsxFileName = \"/Users/anthonygatte/path-finding/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  } // Mouse events for when clicking, when you stop clicking, and when the mouse is\n  // \"hovering\" over the page\n\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Visualize Dijkstra's Algorithm\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n} // Number of rows and columns we have\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    // Nodes\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/anthonygatte/path-finding/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    // Mouse events for when clicking, when you stop clicking, and when the mouse is\n    // \"hovering\" over the page\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false});\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n            if (i === visitedNodesInOrder.length) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n            setTimeout(() => {\n                const node = nodesInShortestPathOrder[i];\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-shortest-path';\n            }, 50 * i);\n        }\n    }\n\n    visualizeDijkstra() {\n        const {grid} = this.state;\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    render() {\n        const {grid, mouseIsPressed} = this.state;\n\n        return (\n            <>\n                <button onClick={() => this.visualizeDijkstra()}>\n                    Visualize Dijkstra's Algorithm\n                </button>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {row, col, isFinish, isStart, isWall} = node;\n                                    return (\n                                        <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            isWall={isWall}\n                                            mouseIsPressed={mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) =>\n                                                this.handleMouseEnter(row, col)\n                                            }\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}></Node>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\n// Number of rows and columns we have\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        // Nodes\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};"]},"metadata":{},"sourceType":"module"}