{"ast":null,"code":"var _jsxFileName = \"/Users/anthonygatte/path-finding/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    //creation of nodes\n    const nodes = []; //15 rows each\n\n    for (let row = 0; row < 15; row++) {\n      const currentRow = []; //50 columns each\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row,\n          isStart: row === 10 && col === 15,\n          isFinish: row === 10 && col === 45\n        };\n        currentRow.push([]);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Visualize Dijkstra's Algorithm\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isWall\n        } = node;\n        return React.createElement(Node, {\n          row: row,\n          col: col,\n          key: nodeIdx,\n          isStart: isStart,\n          isFinish: isFinish,\n          isWall: isWall,\n          mouseisPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/anthonygatte/path-finding/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","props","state","nodes","componentDidMount","row","currentRow","col","currentNode","isStart","isFinish","push","setState","render","console","log","visualizeDijkstra","grid","map","rowIdx","node","nodeIdx","isWall","mouseIsPressed","handleMouseDown","handleMouseEnter","handleMouseUp","getInitialGrid","createNode","distance","Infinity","isVisited","previousNode","getNewGridWithWallToggled","newGrid","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n        super(props);\n        this.state = {\n            nodes: [],\n        };\n    }\n\n    componentDidMount() {\n        //creation of nodes\n        const nodes = [];\n        //15 rows each\n        for (let row = 0; row < 15; row++) {\n            const currentRow = [];\n            //50 columns each\n            for (let col = 0; col < 50; col++) {\n                const currentNode = {\n                    col,\n                    row,\n                    isStart: row === 10 && col === 15,\n                    isFinish: row === 10 && col === 45,\n                };\n                currentRow.push([]);\n            }\n            nodes.push(currentRow);\n        }\n        this.setState({nodes})\n    }\n\n    render() {\n        const {nodes} = this.state;\n        console.log(nodes)\n\n        return (\n            <>\n                <button onClick={() => this.visualizeDijkstra()}>\n                    Visualize Dijkstra's Algorithm\n                </button>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {row, col, isStart, isFinish, isWall} = node;\n                                    return (\n                                        <Node\n                                            row={row}\n                                            col={col}\n                                            key={nodeIdx}\n                                            isStart={isStart}\n                                            isFinish={isFinish}\n                                            isWall={isWall}\n                                            mouseisPressed={mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}>\n\n                                        </Node>\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for (let col = 0; col < 50; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n}\n"]},"metadata":{},"sourceType":"module"}