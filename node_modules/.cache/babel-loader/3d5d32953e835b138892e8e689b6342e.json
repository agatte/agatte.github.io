{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode) {\n  //makes sure they don't overlap or there is no start/ end node\n  const visitedNodesInOrder = [];\n  startNodes.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    console.log(unvisitedNodes[0]);\n    const closestNode = unvisitedNodes.shift();\n    console.log(closestNode);\n    close().isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/anthonygatte/path-finding/src/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","startNodes","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","console","log","closestNode","shift","close","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["\n\nexport function dijkstra(grid, startNode, finishNode) {\n    //makes sure they don't overlap or there is no start/ end node\n    const visitedNodesInOrder = [];\n    startNodes.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        console.log(unvisitedNodes[0]);\n        const closestNode = unvisitedNodes.shift();\n        console.log(closestNode);\n\n\n        close().isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node,grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n    }\n    return nodesInShortestPathOrder;\n}"]},"metadata":{},"sourceType":"module"}