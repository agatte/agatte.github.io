{"ast":null,"code":"var _jsxFileName = \"/Users/anthonygatte/path-finding/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport './PathfindingVisualizer.css';\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodes: []\n    };\n  }\n\n  componentDidMount() {\n    //creation of nodes\n    const nodes = []; //15 rows each\n\n    for (let row = 0; row < 15; row++) {\n      const currentRow = []; //50 columns each\n\n      for (let col = 0; col < 50; col++) {\n        const currentNode = {\n          col,\n          row\n        };\n        currentRow.push([]);\n      }\n\n      nodes.push(currentRow);\n    }\n\n    this.setState({\n      nodes\n    });\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state;\n    console.log(nodes);\n    return React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, nodes.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        return React.createElement(Node, {\n          key: nodeIdx,\n          isStart: true,\n          test: 'foo',\n          test: 'bar',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n      }));\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/anthonygatte/path-finding/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","PathfindingVisualizer","constructor","props","state","nodes","componentDidMount","row","currentRow","col","currentNode","push","setState","render","console","log","map","rowIdx","node","nodeIdx"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAO,6BAAP;AAEA,eAAe,MAAMC,qBAAN,SAAoCF,SAApC,CAA8C;AACzDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAMD,KAAK,GAAG,EAAd,CAFgB,CAGhB;;AACA,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AAC/B,YAAMC,UAAU,GAAG,EAAnB,CAD+B,CAE/B;;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AAC/B,cAAMC,WAAW,GAAG;AAChBD,UAAAA,GADgB;AAEhBF,UAAAA;AAFgB,SAApB;AAIAC,QAAAA,UAAU,CAACG,IAAX,CAAgB,EAAhB;AACH;;AACDN,MAAAA,KAAK,CAACM,IAAN,CAAWH,UAAX;AACH;;AACD,SAAKI,QAAL,CAAc;AAACP,MAAAA;AAAD,KAAd;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAACR,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,KAAK,CAACW,GAAN,CAAU,CAACT,GAAD,EAAMU,MAAN,KAAiB;AACxB,aACI;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKV,GAAG,CAACS,GAAJ,CAAQ,CAACE,IAAD,EAAOC,OAAP,KAAmB;AACxB,eACI,oBAAC,IAAD;AACI,UAAA,GAAG,EAAEA,OADT;AAEI,UAAA,OAAO,EAAE,IAFb;AAGI,UAAA,IAAI,EAAE,KAHV;AAII,UAAA,IAAI,EAAE,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,OARA,CADL,CADJ;AAaH,KAdA,CADL,CADJ;AAmBH;;AAlDwD","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\n\nimport './PathfindingVisualizer.css';\n\nexport default class PathfindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: [],\n        };\n    }\n\n    componentDidMount() {\n        //creation of nodes\n        const nodes = [];\n        //15 rows each\n        for (let row = 0; row < 15; row++) {\n            const currentRow = [];\n            //50 columns each\n            for (let col = 0; col < 50; col++) {\n                const currentNode = {\n                    col,\n                    row,\n                };\n                currentRow.push([]);\n            }\n            nodes.push(currentRow);\n        }\n        this.setState({nodes})\n    }\n\n    render() {\n        const {nodes} = this.state;\n        console.log(nodes)\n\n        return (\n            <div className=\"grid\">\n                {nodes.map((row, rowIdx) => {\n                    return (\n                        <div key={rowIdx}>\n                            {row.map((node, nodeIdx) => {\n                                return (\n                                    <Node\n                                        key={nodeIdx}\n                                        isStart={true}\n                                        test={'foo'}\n                                        test={'bar'}></Node>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}